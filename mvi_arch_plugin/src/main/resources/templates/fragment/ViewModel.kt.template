package ${package_name}

import io.reactivex.rxjava3.core.Observable
import ru.bagrusss.architecture.common.SchedulersProvider
import ru.bagrusss.architecture.mvi.BaseViewModel
import ru.bagrusss.architecture.mvi.MviStateMapper
import ru.bagrusss.architecture.mvi.common.IOData
import ru.bagrusss.architecture.mvi.navigation.ResultsMediator
import ${package_name}.${name}Contract.*

import javax.inject.Inject


internal class ${name}ViewModel @Inject constructor(
    stateMapper: MviStateMapper<DomainState, UIState>,
    resultsMediator: ResultsMediator,
    schedulersProvider: SchedulersProvider
    ${input_data_parameter_model}
    ${router_parameter_model}
) : BaseViewModel<DomainState, UIState, ${output_data_class_name}>(stateMapper, resultsMediator, schedulersProvider), ViewModel {

    override fun observeDomainState(): Observable<DomainState> = TODO()

}